// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace Person {
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Phone;
struct PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
class TInt32;
struct TInt32DefaultTypeInternal;
extern TInt32DefaultTypeInternal _TInt32_default_instance_;
class TString;
struct TStringDefaultTypeInternal;
extern TStringDefaultTypeInternal _TString_default_instance_;
}  // namespace Person
PROTOBUF_NAMESPACE_OPEN
template<> ::Person::Book* Arena::CreateMaybeMessage<::Person::Book>(Arena*);
template<> ::Person::Person* Arena::CreateMaybeMessage<::Person::Person>(Arena*);
template<> ::Person::Phone* Arena::CreateMaybeMessage<::Person::Phone>(Arena*);
template<> ::Person::TInt32* Arena::CreateMaybeMessage<::Person::TInt32>(Arena*);
template<> ::Person::TString* Arena::CreateMaybeMessage<::Person::TString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Person {

enum PhoneType : int {
  PHONE_DEFAULT = 0,
  PHONE_HOME = 1,
  PHONE_WORK = 2,
  PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PhoneType_IsValid(int value);
constexpr PhoneType PhoneType_MIN = PHONE_DEFAULT;
constexpr PhoneType PhoneType_MAX = PHONE_WORK;
constexpr int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const std::string& PhoneType_Name(PhoneType value);
template<typename T>
inline const std::string& PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhoneType_Name.");
  return PhoneType_Name(static_cast<PhoneType>(enum_t_value));
}
bool PhoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhoneType* value);
// ===================================================================

class Phone final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Person.Phone) */ {
 public:
  inline Phone() : Phone(nullptr) {}
  ~Phone() override;
  explicit constexpr Phone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Phone(const Phone& from);
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phone& operator=(Phone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Phone& default_instance() {
    return *internal_default_instance();
  }
  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(Phone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Phone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Phone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Phone";
  }
  protected:
  explicit Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kPhoneTypeFieldNumber = 2,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // .Person.PhoneType phone_type = 2;
  void clear_phone_type();
  ::Person::PhoneType phone_type() const;
  void set_phone_type(::Person::PhoneType value);
  private:
  ::Person::PhoneType _internal_phone_type() const;
  void _internal_set_phone_type(::Person::PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:Person.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  int phone_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class Book final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Person.Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  ~Book() override;
  explicit constexpr Book(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Book* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float price = 2;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:Person.Book)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Person.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit constexpr Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 3,
    kBooksFieldNumber = 5,
    kNameFieldNumber = 1,
    kAddressFieldNumber = 7,
    kPhoneFieldNumber = 4,
    kAgeFieldNumber = 2,
    kVipFieldNumber = 6,
  };
  // repeated string languages = 3;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // repeated .Person.Book books = 5;
  int books_size() const;
  private:
  int _internal_books_size() const;
  public:
  void clear_books();
  ::Person::Book* mutable_books(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person::Book >*
      mutable_books();
  private:
  const ::Person::Book& _internal_books(int index) const;
  ::Person::Book* _internal_add_books();
  public:
  const ::Person::Book& books(int index) const;
  ::Person::Book* add_books();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person::Book >&
      books() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 7;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .Person.Phone phone = 4;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const ::Person::Phone& phone() const;
  PROTOBUF_NODISCARD ::Person::Phone* release_phone();
  ::Person::Phone* mutable_phone();
  void set_allocated_phone(::Person::Phone* phone);
  private:
  const ::Person::Phone& _internal_phone() const;
  ::Person::Phone* _internal_mutable_phone();
  public:
  void unsafe_arena_set_allocated_phone(
      ::Person::Phone* phone);
  ::Person::Phone* unsafe_arena_release_phone();

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // bool vip = 6;
  void clear_vip();
  bool vip() const;
  void set_vip(bool value);
  private:
  bool _internal_vip() const;
  void _internal_set_vip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Person.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person::Book > books_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::Person::Phone* phone_;
  int32_t age_;
  bool vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class TInt32 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Person.TInt32) */ {
 public:
  inline TInt32() : TInt32(nullptr) {}
  ~TInt32() override;
  explicit constexpr TInt32(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TInt32(const TInt32& from);
  TInt32(TInt32&& from) noexcept
    : TInt32() {
    *this = ::std::move(from);
  }

  inline TInt32& operator=(const TInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline TInt32& operator=(TInt32&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TInt32& default_instance() {
    return *internal_default_instance();
  }
  static inline const TInt32* internal_default_instance() {
    return reinterpret_cast<const TInt32*>(
               &_TInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TInt32& a, TInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(TInt32* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TInt32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TInt32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TInt32& from);
  void MergeFrom(const TInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TInt32* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.TInt32";
  }
  protected:
  explicit TInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt1FieldNumber = 1,
  };
  // int32 int1 = 1;
  void clear_int1();
  int32_t int1() const;
  void set_int1(int32_t value);
  private:
  int32_t _internal_int1() const;
  void _internal_set_int1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Person.TInt32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t int1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class TString final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Person.TString) */ {
 public:
  inline TString() : TString(nullptr) {}
  ~TString() override;
  explicit constexpr TString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TString(const TString& from);
  TString(TString&& from) noexcept
    : TString() {
    *this = ::std::move(from);
  }

  inline TString& operator=(const TString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TString& operator=(TString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TString* internal_default_instance() {
    return reinterpret_cast<const TString*>(
               &_TString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TString& a, TString& b) {
    a.Swap(&b);
  }
  inline void Swap(TString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TString& from);
  void MergeFrom(const TString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person.TString";
  }
  protected:
  explicit TString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr1FieldNumber = 1,
  };
  // string str1 = 1;
  void clear_str1();
  const std::string& str1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str1();
  PROTOBUF_NODISCARD std::string* release_str1();
  void set_allocated_str1(std::string* str1);
  private:
  const std::string& _internal_str1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str1(const std::string& value);
  std::string* _internal_mutable_str1();
  public:

  // @@protoc_insertion_point(class_scope:Person.TString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phone

// string number = 1;
inline void Phone::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Phone::number() const {
  // @@protoc_insertion_point(field_get:Person.Phone.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Phone::set_number(ArgT0&& arg0, ArgT... args) {
 
 number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.Phone.number)
}
inline std::string* Phone::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:Person.Phone.number)
  return _s;
}
inline const std::string& Phone::_internal_number() const {
  return number_.Get();
}
inline void Phone::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Phone::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Phone::release_number() {
  // @@protoc_insertion_point(field_release:Person.Phone.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.Phone.number)
}

// .Person.PhoneType phone_type = 2;
inline void Phone::clear_phone_type() {
  phone_type_ = 0;
}
inline ::Person::PhoneType Phone::_internal_phone_type() const {
  return static_cast< ::Person::PhoneType >(phone_type_);
}
inline ::Person::PhoneType Phone::phone_type() const {
  // @@protoc_insertion_point(field_get:Person.Phone.phone_type)
  return _internal_phone_type();
}
inline void Phone::_internal_set_phone_type(::Person::PhoneType value) {
  
  phone_type_ = value;
}
inline void Phone::set_phone_type(::Person::PhoneType value) {
  _internal_set_phone_type(value);
  // @@protoc_insertion_point(field_set:Person.Phone.phone_type)
}

// -------------------------------------------------------------------

// Book

// string name = 1;
inline void Book::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:Person.Book.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.Book.name)
}
inline std::string* Book::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Person.Book.name)
  return _s;
}
inline const std::string& Book::_internal_name() const {
  return name_.Get();
}
inline void Book::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:Person.Book.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Book::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.Book.name)
}

// float price = 2;
inline void Book::clear_price() {
  price_ = 0;
}
inline float Book::_internal_price() const {
  return price_;
}
inline float Book::price() const {
  // @@protoc_insertion_point(field_get:Person.Book.price)
  return _internal_price();
}
inline void Book::_internal_set_price(float value) {
  
  price_ = value;
}
inline void Book::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Person.Book.price)
}

// -------------------------------------------------------------------

// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.Person.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.Person.name)
}
inline std::string* Person::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Person.Person.name)
  return _s;
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:Person.Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.Person.name)
}

// int32 age = 2;
inline void Person::clear_age() {
  age_ = 0;
}
inline int32_t Person::_internal_age() const {
  return age_;
}
inline int32_t Person::age() const {
  // @@protoc_insertion_point(field_get:Person.Person.age)
  return _internal_age();
}
inline void Person::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void Person::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Person.Person.age)
}

// repeated string languages = 3;
inline int Person::_internal_languages_size() const {
  return languages_.size();
}
inline int Person::languages_size() const {
  return _internal_languages_size();
}
inline void Person::clear_languages() {
  languages_.Clear();
}
inline std::string* Person::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:Person.Person.languages)
  return _s;
}
inline const std::string& Person::_internal_languages(int index) const {
  return languages_.Get(index);
}
inline const std::string& Person::languages(int index) const {
  // @@protoc_insertion_point(field_get:Person.Person.languages)
  return _internal_languages(index);
}
inline std::string* Person::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:Person.Person.languages)
  return languages_.Mutable(index);
}
inline void Person::set_languages(int index, const std::string& value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Person.Person.languages)
}
inline void Person::set_languages(int index, std::string&& value) {
  languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Person.Person.languages)
}
inline void Person::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.Person.languages)
}
inline void Person::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.Person.languages)
}
inline std::string* Person::_internal_add_languages() {
  return languages_.Add();
}
inline void Person::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.Person.languages)
}
inline void Person::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.Person.languages)
}
inline void Person::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.Person.languages)
}
inline void Person::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.Person.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::languages() const {
  // @@protoc_insertion_point(field_list:Person.Person.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:Person.Person.languages)
  return &languages_;
}

// .Person.Phone phone = 4;
inline bool Person::_internal_has_phone() const {
  return this != internal_default_instance() && phone_ != nullptr;
}
inline bool Person::has_phone() const {
  return _internal_has_phone();
}
inline void Person::clear_phone() {
  if (GetArenaForAllocation() == nullptr && phone_ != nullptr) {
    delete phone_;
  }
  phone_ = nullptr;
}
inline const ::Person::Phone& Person::_internal_phone() const {
  const ::Person::Phone* p = phone_;
  return p != nullptr ? *p : reinterpret_cast<const ::Person::Phone&>(
      ::Person::_Phone_default_instance_);
}
inline const ::Person::Phone& Person::phone() const {
  // @@protoc_insertion_point(field_get:Person.Person.phone)
  return _internal_phone();
}
inline void Person::unsafe_arena_set_allocated_phone(
    ::Person::Phone* phone) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_);
  }
  phone_ = phone;
  if (phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Person.Person.phone)
}
inline ::Person::Phone* Person::release_phone() {
  
  ::Person::Phone* temp = phone_;
  phone_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Person::Phone* Person::unsafe_arena_release_phone() {
  // @@protoc_insertion_point(field_release:Person.Person.phone)
  
  ::Person::Phone* temp = phone_;
  phone_ = nullptr;
  return temp;
}
inline ::Person::Phone* Person::_internal_mutable_phone() {
  
  if (phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::Person::Phone>(GetArenaForAllocation());
    phone_ = p;
  }
  return phone_;
}
inline ::Person::Phone* Person::mutable_phone() {
  ::Person::Phone* _msg = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:Person.Person.phone)
  return _msg;
}
inline void Person::set_allocated_phone(::Person::Phone* phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete phone_;
  }
  if (phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Person::Phone>::GetOwningArena(phone);
    if (message_arena != submessage_arena) {
      phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone, submessage_arena);
    }
    
  } else {
    
  }
  phone_ = phone;
  // @@protoc_insertion_point(field_set_allocated:Person.Person.phone)
}

// repeated .Person.Book books = 5;
inline int Person::_internal_books_size() const {
  return books_.size();
}
inline int Person::books_size() const {
  return _internal_books_size();
}
inline void Person::clear_books() {
  books_.Clear();
}
inline ::Person::Book* Person::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:Person.Person.books)
  return books_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person::Book >*
Person::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:Person.Person.books)
  return &books_;
}
inline const ::Person::Book& Person::_internal_books(int index) const {
  return books_.Get(index);
}
inline const ::Person::Book& Person::books(int index) const {
  // @@protoc_insertion_point(field_get:Person.Person.books)
  return _internal_books(index);
}
inline ::Person::Book* Person::_internal_add_books() {
  return books_.Add();
}
inline ::Person::Book* Person::add_books() {
  ::Person::Book* _add = _internal_add_books();
  // @@protoc_insertion_point(field_add:Person.Person.books)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Person::Book >&
Person::books() const {
  // @@protoc_insertion_point(field_list:Person.Person.books)
  return books_;
}

// bool vip = 6;
inline void Person::clear_vip() {
  vip_ = false;
}
inline bool Person::_internal_vip() const {
  return vip_;
}
inline bool Person::vip() const {
  // @@protoc_insertion_point(field_get:Person.Person.vip)
  return _internal_vip();
}
inline void Person::_internal_set_vip(bool value) {
  
  vip_ = value;
}
inline void Person::set_vip(bool value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:Person.Person.vip)
}

// string address = 7;
inline void Person::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Person::address() const {
  // @@protoc_insertion_point(field_get:Person.Person.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.Person.address)
}
inline std::string* Person::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:Person.Person.address)
  return _s;
}
inline const std::string& Person::_internal_address() const {
  return address_.Get();
}
inline void Person::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_address() {
  // @@protoc_insertion_point(field_release:Person.Person.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.Person.address)
}

// -------------------------------------------------------------------

// TInt32

// int32 int1 = 1;
inline void TInt32::clear_int1() {
  int1_ = 0;
}
inline int32_t TInt32::_internal_int1() const {
  return int1_;
}
inline int32_t TInt32::int1() const {
  // @@protoc_insertion_point(field_get:Person.TInt32.int1)
  return _internal_int1();
}
inline void TInt32::_internal_set_int1(int32_t value) {
  
  int1_ = value;
}
inline void TInt32::set_int1(int32_t value) {
  _internal_set_int1(value);
  // @@protoc_insertion_point(field_set:Person.TInt32.int1)
}

// -------------------------------------------------------------------

// TString

// string str1 = 1;
inline void TString::clear_str1() {
  str1_.ClearToEmpty();
}
inline const std::string& TString::str1() const {
  // @@protoc_insertion_point(field_get:Person.TString.str1)
  return _internal_str1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TString::set_str1(ArgT0&& arg0, ArgT... args) {
 
 str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Person.TString.str1)
}
inline std::string* TString::mutable_str1() {
  std::string* _s = _internal_mutable_str1();
  // @@protoc_insertion_point(field_mutable:Person.TString.str1)
  return _s;
}
inline const std::string& TString::_internal_str1() const {
  return str1_.Get();
}
inline void TString::_internal_set_str1(const std::string& value) {
  
  str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TString::_internal_mutable_str1() {
  
  return str1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TString::release_str1() {
  // @@protoc_insertion_point(field_release:Person.TString.str1)
  return str1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TString::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    
  } else {
    
  }
  str1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Person.TString.str1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Person

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Person::PhoneType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
